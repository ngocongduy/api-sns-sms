openapi: 3.0.0
info:
  version: '1.0'
  title: "pit-jv-lambda-examples"
  description: POC API
  license:
    name: MIT

x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
  params:
    validateRequestParameters: true
    validateRequestBody: false
  Validate body, query string parameters, and headers:
    validateRequestParameters: true
    validateRequestBody: true

paths:
  /send-sms:
    options:
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers:
                Fn::Sub: ${CorsHeaders}
              method.response.header.Access-Control-Allow-Methods:
                Fn::Sub: ${CorsMethods}
              method.response.header.Access-Control-Allow-Origin:
                Fn::Sub: ${CorsOrigin}
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          $ref: '#/components/responses/200Cors'
    post:
      security:
      - api_key: []      
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ ApiGatewayLambdaCallSNSRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TriggerSNSFunction.Arn}/invocations
          # - lambdaArn: 
          #   Fn::GetAtt: [ TriggerSNSFunction, Arn ]
          # "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:012345678901:function:HelloWorld/invocations",
          # arn:aws:lambda:ap-southeast-1:766501982293:function:api-sf-sns-trigger-state-machine
        httpMethod: POST
        type: aws
        responses:
          default:
            statusCode: 200
          ".*MISSING_AUTHENTICATION_TOKEN.*":
            statusCode: 403
            responseTemplates:
              application/json: $input.path('$.errorMessage')
          ".*NOT_FOUND.*":
            statusCode: 404
            responseTemplates:
              application/json: $input.path('$.errorMessage')
        requestTemplates:
          application/json:
            Fn::Sub: |-
              #set($inputRoot = $input.path('$'))
              {
                "message": "$inputRoot.message",
                "url": "$inputRoot.url"
              }
      summary: Consume body info and send sms
      responses:
        200:
          $ref: '#/components/responses/200Empty'
        403:
          $ref: '#/components/responses/Error'
        404:
          $ref: '#/components/responses/Error'
  /delete-topic:
    options:
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers:
                Fn::Sub: ${CorsHeaders}
              method.response.header.Access-Control-Allow-Methods:
                Fn::Sub: ${CorsMethods}
              method.response.header.Access-Control-Allow-Origin:
                Fn::Sub: ${CorsOrigin}
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          $ref: '#/components/responses/200Cors'
    post:
      security:
      - api_key: []      
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ ApiGatewayLambdaCallSNSRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTopicFunction.Arn}/invocations
        httpMethod: POST
        type: aws
        responses:
          default:
            statusCode: 200
          ".*MISSING_AUTHENTICATION_TOKEN.*":
            statusCode: 403
            responseTemplates:
              application/json: $input.path('$.errorMessage')
          ".*NOT_FOUND.*":
            statusCode: 404
            responseTemplates:
              application/json: $input.path('$.errorMessage')
        requestTemplates:
          application/json:
            Fn::Sub: |-
              #set($inputRoot = $input.path('$'))
              {
                "topicName": "$inputRoot.topicName",
              }
      summary: Consume body info and delete topic
      responses:
        200:
          $ref: '#/components/responses/200Empty'
        403:
          $ref: '#/components/responses/Error'
        404:
          $ref: '#/components/responses/Error'

components:
  securitySchemes:
    api_key:
      type: "apiKey"
      name: "x-api-key"
      in: "header"
  schemas:
    Error:
      title: Error
      type: object
      properties:
        code:
          type: string
        message:
          type: string

  responses:
    200Empty:
      description: Default OK response

    200Cors:
      description: Default response for CORS method
      headers:
        Access-Control-Allow-Headers:
          schema:
            type: "string"
        Access-Control-Allow-Methods:
          schema:
            type: "string"
        Access-Control-Allow-Origin:
          schema:
            type: "string"

    Error:
      description: Error Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      headers:
        Access-Control-Allow-Headers:
          schema:
            type: "string"
        Access-Control-Allow-Origin:
          schema:
            type: "string" 